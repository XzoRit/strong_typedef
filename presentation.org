#+STARTUP: showeverything
#+OPTIONS: ^:{}

#+OPTIONS: reveal_title_slide:nil
#+OPTIONS: reveal_slide_number:nil
#+OPTIONS: reveal_progress
#+OPTIONS: num:nil 
#+REVEAL_HLEVEL:1

#+REVEAL_THEME: black
#+REVEAL_TRANS: none
#+REVEAL_DEFAULT_FRAG_STYLE: appear

* strong typedef

* usage
#+BEGIN_SRC C++
Location meetingRoom("F05", "Moislling", 211, 2);
#+END_SRC

* usage
#+BEGIN_SRC C++
Location meetingRoom("Reval", "Sylt", 1, 2);
#+END_SRC

* usage
#+BEGIN_SRC C++
Appointment bookRoom(
  int hours, int minutes,
  string building, string roomName,
  int roomNo, int floor)
{
  //...
  
  Location meetingRoom(building, roomName, roomNo, floor);

  //...
}
#+END_SRC

* declaration
#+BEGIN_SRC C++
Location(string building
  , string pointOfCare
  , int floor
  , int bed);
#+END_SRC

* usage
#+BEGIN_SRC C++
Appointment bookRoom(
  int hours, int minutes,
  string building, string roomName,
  int roomNo, int floor)
{
  
Location meetingRoom(building=building
  , pointOfcare=roomName
  , floor=floor
  , bed=roomNo);

}
#+END_SRC

* usage
#+BEGIN_SRC C++
m_appEnv->init(false, NULL, true, NULL);
#+END_SRC

* problem
#+BEGIN_SRC C++
raiseAlarm(false, false);
getEnabledSelected(false, true, false);
setAllowOff(false, false);
changeSwitch(false, false, true);
m_failureConfig(false, false, false, false);
#+END_SRC

* ctors
#+BEGIN_SRC C++
TimeZone(string posixTzString);
TimeZone(string ianaTzString);
#+END_SRC

* process
#+BEGIN_SRC C++
run(false, true);
run(-99.99, +99.99);
run(vec.data(), vec.size());
#+END_SRC

* process
#+BEGIN_SRC C++
run(bool, bool);
#+END_SRC

* goal
being able to reason about code locally

* universal design guideline
interfaces should be easy to use correctly and hard to use incorrectly

* error checking
an error at ... is better than
#+ATTR_REVEAL: :frag (appear)
- compile time
- link time
- object construction
- object use

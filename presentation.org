#+STARTUP: showeverything
#+OPTIONS: ^:{}

#+OPTIONS: reveal_title_slide:nil
#+OPTIONS: reveal_slide_number:nil
#+OPTIONS: reveal_progress
#+OPTIONS: num:nil 
#+REVEAL_HLEVEL:1

#+REVEAL_THEME: black
#+REVEAL_TRANS: none
#+REVEAL_DEFAULT_FRAG_STYLE: appear

* strong typedef

* better API
- safer
- more expressive
- faster

* motivation
#+BEGIN_SRC C++
run(false, true);
run(-99.99, +99.99);
run(vec.data(), vec.size());
#+END_SRC

* problem
#+BEGIN_SRC C++
run(bool, bool);
#+END_SRC
implicit conversions

* motivation
ctor
#+BEGIN_SRC C++
TimeZone(string posixTzString);
TimeZone(string ianaTzString);
#+END_SRC

* problem
same storage type but different semantic

* motivation
#+BEGIN_SRC C++
typedef int ErrorCode;
#+END_SRC

* problem
#+BEGIN_SRC C++
ErrorCode a(FatalFailure);
a += 5;
a %= 3;
// ...
#+END_SRC
- typedef does not define a new type
- API is too big

* motivation
#+BEGIN_SRC C++
m_appEnv->init(NULL, true, NULL);

raiseAlarm(false, false);
setAllowOff(false, false);

checkTimeout(5000, 3);

EXPECT_EQ(foo(), "bar");

Descriptions descs =
{
    {1200,  5, 256000,     3, 100, 50},
    {3600, 23,     32, 32000, 120, 10}
    {0   ,  0,      0,     0,   0,  0}
};
#+END_SRC

* problem
too many parameters of same type
(too many == two)

* solution
lookup declaration

* never
[[https://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/][interrupt programmer]]

* goal
being able to reason about code locally

* universal design guideline
interfaces should be easy to use correctly and hard to use incorrectly

* error checking
an error at ... is better than
#+ATTR_REVEAL: :frag (appear)
- compile time
- link time
- object construction
- object use

* solution
use the typesystem

* types
#+BEGIN_SRC C++
class IanaTzString
{
    IanaTzString(const string& value) : m_value(value) {}
    string get() { return m_value; }
    string m_value;
};

class PosixTzString
{
    PosixTzString(const string& value) : m_value(value) {}
    string get() { return m_value; }
    string m_value;
};

TimeZone(PosixTzString posixTzString);
TimeZone(IanaTzString  ianaTzString);
#+END_SRC

* types
#+BEGIN_SRC C++
class Resetable
{
    Resetable(bool value) : m_value(value) {}
    bool get() { return m_value; }
    bool m_value;
};

class MakeDebugLogEntry
{
    MakeDebugLogEntry(bool value) : m_value(value) {}
    bool get() { return m_value; }
    bool m_value;
};

raiseAlarm(Resetable(false), MakeDebugLogEntry(false));
#+END_SRC

* types
#+BEGIN_SRC C++
class ErrorCode
{
    ErrorCode(int value) : m_value(value) {}
    int get() { return m_value; }
    int m_value;
};

const ErrorCode FatalFailure(117);

ErrorCode a(FatalFailure);
a += 5; // compile error
a %= 3; // compile error
#+END_SRC

* boring
- too much to write
- no fun
- tedious
- do not have time for that
- your excuse here

* solution
let the compiler do the boring work for us

* types
#+BEGIN_SRC C++
template<class T, class Tag>
class StongTypedef
{
    StrongTypedef(T value) : m_value(value) {}
    T get() { return m_value; }
    T m_value;
};
#+END_SRC

* generic
#+BEGIN_SRC C++
typedef StrongTypedef<string, struct IanaTzStringTag > IanaTzString;
typedef StrongTypedef<string, struct PosixTzStringTag> PosixTzString;

typedef StrongTypedef<bool, struct ResetableTag        > Resetable;
typedef StrongTypedef<bool, struct MakeDebugLogEntryTag> MakeDebugLogEntry;
#+END_SRC

* trash
** usage
#+BEGIN_SRC C++
Location meetingRoom("F05", "Moislling", 211, 2);
#+END_SRC

** usage
#+BEGIN_SRC C++
Location meetingRoom("Reval", "Sylt", 1, 2);
#+END_SRC

** usage
#+BEGIN_SRC C++
Appointment bookRoom(
  int hours, int minutes,
  string building, string roomName,
  int roomNo, int floor)
{
  //...
  
  Location meetingRoom(building, roomName, roomNo, floor);

  //...
}
#+END_SRC

** declaration
#+BEGIN_SRC C++
Location(string building
  , string pointOfCare
  , int floor
  , int bed);
#+END_SRC

** usage
#+BEGIN_SRC C++
Appointment bookRoom(
  int hours, int minutes,
  string building, string roomName,
  int roomNo, int floor)
{
  
Location meetingRoom(building=building
  , pointOfCare=roomName
  , floor=floor
  , bed=roomNo);

}
#+END_SRC
